// Code generated by go-bindata.
// sources:
// ../../templates/atom.tmpl
// ../../templates/base.tmpl
// ../../templates/body/analytics.tmpl
// ../../templates/body/content/archive.tmpl
// ../../templates/body/content/article/article.tmpl
// ../../templates/body/content/article/disqus.tmpl
// ../../templates/body/content/article/share_icons.tmpl
// ../../templates/body/content/category.tmpl
// ../../templates/body/content/index.tmpl
// ../../templates/body/content/page.tmpl
// ../../templates/body/content/tag.tmpl
// ../../templates/body/footer.tmpl
// ../../templates/body/footer_scripts.tmpl
// ../../templates/body/navbar.tmpl
// ../../templates/head/header.tmpl
// ../../templates/head/header_scripts.tmpl
// ../../templates/head/share_this.tmpl
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesAtomTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x92\x51\x4f\xc3\x20\x14\x85\xdf\xf9\x15\x37\x64\x8f\x5a\xa6\xc6\xc4\x2c\xb4\xcb\xa2\x8f\x3e\xa9\x7b\x36\xb8\xde\x76\xc4\x16\x16\x4a\xed\x0c\xe1\xbf\x1b\xe8\x58\xb7\xc6\x37\xe0\x3b\xf7\x9e\x73\x9a\x3a\x57\x62\x25\x15\x02\xfd\x12\x1d\x52\xef\x09\x5f\x1f\xdb\x06\x7e\xd0\x74\x52\xab\x9c\xde\x65\x4b\x0a\xa8\x76\xba\x94\xaa\xce\x69\x6f\xab\xdb\x27\xba\x2e\x08\xe1\x15\x62\x09\xc7\xb6\x51\x5d\x4e\xf7\xd6\x1e\x56\x8c\x0d\xc3\x90\x0d\x0f\x99\x36\x35\xbb\x5f\x2e\x1f\xd9\xc6\xea\x96\x16\x04\x80\x5b\x69\x1b\x2c\x9c\xcb\x9e\xb5\xaa\x64\x9d\x7d\x84\xbb\xf7\x9c\x8d\x20\x48\x1a\xa9\xbe\x61\x6f\xb0\xca\xe9\xa4\xdb\xbe\xbd\x7a\x4f\x81\x45\x45\x7f\x28\x85\xc5\x32\xac\xd9\x8e\xc7\xb0\x21\xbd\x12\x02\xe0\x9c\xac\x20\xdb\x18\x2b\x77\x0d\x76\xde\xc7\x27\x23\x54\x8d\xb0\xf8\xbc\x81\x85\x18\x09\xac\xf2\x99\x8a\xa3\xb2\xe6\x37\xb8\x5c\x84\x4d\xf2\x7f\xd2\xce\xf3\x2e\xae\x02\x5f\x8c\xbe\x37\x7d\x7d\x6e\x70\x0a\x78\x86\x2f\xc2\x62\xb4\xbf\x2a\x37\xc3\x17\x0d\xc7\x0d\xa8\xca\x34\xd4\xf5\x6d\x2b\x52\xee\xc0\x26\xdf\x91\x24\x21\xbb\x52\x72\xd1\xdb\xbd\x36\x69\x8c\x2b\xd1\xc6\xbe\xa9\xc4\x26\xe2\x60\x1d\xc9\x69\xc5\x34\xc4\xd9\xf9\x73\x4d\x71\xd2\x89\xb3\xf0\x67\x14\x24\xdd\xff\x02\x00\x00\xff\xff\x3c\xc3\x3c\x5e\x63\x02\x00\x00")

func templatesAtomTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAtomTmpl,
		"templates/atom.tmpl",
	)
}

func templatesAtomTmpl() (*asset, error) {
	bytes, err := templatesAtomTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/atom.tmpl", size: 611, mode: os.FileMode(420), modTime: time.Unix(1481713853, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesBaseTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x92\x41\x6f\xd4\x30\x10\x85\xef\xfb\x2b\x86\xb9\x42\x12\xb8\x71\x88\x57\xaa\x96\x56\xe2\x80\x8a\x44\x91\xe0\x54\x4d\xec\x49\x33\xaa\x63\x87\x64\x36\xcb\x2a\xca\x7f\x47\x89\xb7\xd2\x2e\xd0\xf6\x64\x5b\xef\xb3\x3d\xef\xcd\x4c\x93\xe3\x5a\x02\x03\x56\x34\x30\xce\xf3\xa6\x7c\xf3\xe9\x76\x77\xf7\xf3\xeb\x35\x34\xda\xfa\xed\xa6\x4c\x0b\x40\xd9\x30\xb9\x65\x03\x50\xb6\xac\x04\xb6\xa1\x7e\x60\x35\xb8\xd7\x3a\xfb\x88\xe7\x52\xa3\xda\x65\xfc\x6b\x2f\xa3\xc1\x1f\xd9\xf7\xab\x6c\x17\xdb\x8e\x54\x2a\xcf\x08\x36\x06\xe5\xa0\x06\x3f\x5f\x1b\x76\x0f\x7c\x71\x33\x50\xcb\x06\x47\xe1\x43\x17\x7b\x3d\x83\x0f\xe2\xb4\x31\x8e\x47\xb1\x9c\xad\x87\x77\x20\x41\x54\xc8\x67\x83\x25\xcf\xe6\x43\xfe\x1e\xb7\x9b\xf5\xad\x69\x92\x1a\xf2\x5d\x0c\xb5\x3c\xe4\x37\x34\x8a\x8d\x61\x9e\xd3\x37\x5e\xc2\x23\xf4\xec\x0d\x0e\x4d\xec\xd5\xee\x15\x16\x19\xa1\xe9\xb9\x36\x38\x4d\xff\xdc\x43\x28\xb6\xa7\x67\x39\xb8\x79\x4e\x7f\x94\x2a\xea\x79\x3b\x4d\x95\x8f\xf6\x11\x70\x3d\x22\xe4\xf3\x7c\xc2\xca\x22\x11\x4f\x25\x9d\xb8\x25\x46\xee\xcf\xc1\xff\xe9\xf7\x83\xed\xa5\xd3\xe1\x79\x6e\x68\xa8\xe7\x7b\x6d\xe4\x92\x39\x33\x99\x0c\x15\x35\xb3\x1b\x0a\xf2\x3e\x27\x8d\x6d\xfe\xbb\xf5\x08\x7a\xec\xd8\x20\x75\x9d\x17\x4b\x2a\x31\x14\x8b\xf6\x76\xd5\xd6\x6c\xc8\x2b\xf7\x81\x94\x11\x56\x17\x06\xbf\x89\xf2\x41\x1c\xc3\xd5\xdd\xed\x17\xb8\x61\x76\x6b\xe3\xca\x22\xcd\xc5\xb2\xad\xa2\x3b\x6e\x2f\xab\x0c\x34\x56\xf4\x82\xdb\x53\x7f\x9f\x07\xea\x18\xf5\xa5\xb8\x92\xfe\x7a\x5c\x14\xc8\x1f\x55\xec\xdf\x48\x59\xa4\xaa\xcb\x22\x0d\xfa\x93\xf2\x27\x00\x00\xff\xff\xdf\x8f\xf3\x43\x1a\x03\x00\x00")

func templatesBaseTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesBaseTmpl,
		"templates/base.tmpl",
	)
}

func templatesBaseTmpl() (*asset, error) {
	bytes, err := templatesBaseTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/base.tmpl", size: 794, mode: os.FileMode(420), modTime: time.Unix(1481713853, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesBodyAnalyticsTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x92\x4d\xcf\xd3\x30\x0c\xc7\xef\xfb\x14\x56\x2f\x69\xc5\xa3\x94\xf3\xba\x82\x36\x40\x88\xcb\xc4\x81\xdb\x34\x4d\x26\x75\xb3\x6c\x5d\x52\x12\x77\x50\x65\xfd\xee\xa8\x2f\x88\x09\xa1\xe7\xe4\xb7\x7f\x6c\xff\x92\xc4\x58\x51\x6d\x2c\x41\x82\x16\x9b\x9e\x8d\x0a\xc9\x30\xac\x62\x34\x35\xc8\x0f\xce\xd6\x46\xcb\xcf\xce\xe9\x86\xb6\x7f\xea\x5f\x3e\x0e\xc3\x0a\x60\x13\x94\x37\x2d\x03\xf7\x2d\x95\x09\xd3\x2f\xce\x2f\x78\xc7\x39\x9b\xbc\x5b\x01\x00\xdc\xd1\xc3\x49\xe3\x0f\x28\x67\xf3\x78\xc0\xe1\x58\x4c\xa5\x31\x96\x6d\x17\xce\xe9\x41\x9c\x02\xf1\x56\x29\xd7\x59\x16\x2f\x20\x62\x7c\x65\xb2\x38\x66\xff\x69\xc0\x1e\xd5\xf5\x2b\x6a\xba\x1b\xfa\x39\x49\x26\x4d\x5a\x77\x56\xb1\x71\x36\xcd\x20\x4e\x99\x79\x27\x8d\x50\x42\xe5\x54\x77\x23\xcb\x52\x79\x42\xa6\x4f\x0d\x8d\x51\x2a\x66\x02\x91\x15\xa0\x51\x8e\x74\x50\x82\xf8\x87\x4f\x4c\x45\x0c\xbd\x55\x50\x02\xfb\x8e\x8a\xa5\xbd\x46\x19\xfc\x98\x4c\xc5\x99\xb9\x0d\x6b\x01\xe5\xd3\xac\xc6\x29\x1c\x17\x92\xad\x77\xec\x94\x6b\xe0\x3d\x2c\xc2\x3c\x17\xb0\x9e\x83\xd1\xcf\xe0\x0d\x88\xc0\xc8\x41\x6a\x59\xb9\xee\x7b\x43\xaa\x31\xea\x2a\x2d\x71\x5e\x29\x79\x09\xa2\x78\x42\x0a\xcf\x44\x9a\x78\xc1\x09\xbb\xfe\x1b\xea\x3d\xde\xe8\x2f\xd8\xe1\xed\xb1\x80\x20\x5b\xf4\x64\x79\xef\x2a\x92\xc6\x06\xf2\xbc\xa3\xda\x79\x4a\x35\xbe\x40\x58\x2e\x79\xc8\xd2\xc9\xdb\xe4\xf3\xe1\xf1\x59\x63\x24\x5b\x4d\x7f\x64\xb6\xbf\x03\x00\x00\xff\xff\x5a\x78\x7e\x8d\x43\x02\x00\x00")

func templatesBodyAnalyticsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesBodyAnalyticsTmpl,
		"templates/body/analytics.tmpl",
	)
}

func templatesBodyAnalyticsTmpl() (*asset, error) {
	bytes, err := templatesBodyAnalyticsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/body/analytics.tmpl", size: 579, mode: os.FileMode(420), modTime: time.Unix(1481713853, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesBodyContentArchiveTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x90\xb1\x6e\xb4\x30\x10\x84\x7b\x3f\xc5\x0a\x5d\xf9\x83\x7f\x52\x45\x91\xb1\x74\x4a\x8a\xf4\x49\x1f\x59\xec\x02\x96\x8c\x91\x8c\x8f\xe2\x36\xfb\xee\x11\x1c\x90\x74\xe3\xd9\xf9\xbc\xab\x61\x46\xea\x7c\x24\x28\xb2\xcf\x81\x0a\x11\x75\x4d\xed\xe0\x17\x9a\xe1\x1b\x98\xab\xd7\x29\x76\xbe\xaf\x3e\xd7\xa9\x88\x62\xa6\x88\x22\x4a\xfd\x82\xed\x14\x33\xc5\xbc\xa2\x06\xfd\x02\x6d\x70\xf3\xdc\x6c\xb6\xf3\x91\x12\xb4\x53\x28\x47\x2c\xeb\xff\x87\x9a\xba\x6e\xa6\x5c\xd6\xdb\x3b\xf4\xe5\xf3\x21\xf6\xc1\x53\x61\x15\x80\x19\x6a\xbb\xdf\x62\xf4\x50\x6f\x16\x86\xe3\x7b\x0c\xe5\x30\x25\x7f\x5f\xb7\x84\x2d\x0f\xc0\x9c\x5c\xec\x09\x2e\x5f\xff\xe0\xe2\x52\xf6\x6d\x20\x78\x69\xa0\xba\x3e\xf4\x2c\xb2\xe5\x0c\x66\xcb\x7c\xa9\xde\x6f\xa3\x8b\xfe\x4e\x6f\x2e\x53\xf6\x23\x9d\x50\xb5\x3a\x22\x46\x63\xb6\x3b\x81\xd6\x38\x18\x12\x75\x4d\xc1\x7c\xe6\x3e\xc2\xad\x17\x29\xec\x1f\x6b\x6f\xca\x68\x67\x8d\x46\x3c\x2e\x7b\xd4\x06\x60\x34\x06\xab\x8c\x46\xbf\xd8\xb3\xcd\x9f\x00\x00\x00\xff\xff\xe0\x96\xd1\xf4\x86\x01\x00\x00")

func templatesBodyContentArchiveTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesBodyContentArchiveTmpl,
		"templates/body/content/archive.tmpl",
	)
}

func templatesBodyContentArchiveTmpl() (*asset, error) {
	bytes, err := templatesBodyContentArchiveTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/body/content/archive.tmpl", size: 390, mode: os.FileMode(420), modTime: time.Unix(1481713853, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesBodyContentArticleArticleTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x93\xcf\x8e\xdb\x20\x10\xc6\xef\x7e\x8a\x11\xda\x63\x6d\x37\x3d\x55\x15\xb1\xb4\xda\x1e\xfa\x00\x7b\x5f\x11\x3c\xd8\xa8\x18\x22\x43\x56\xda\x4e\x79\xf7\x0a\x1c\x12\x27\xb1\xd4\xbd\x24\xcc\xbf\xef\xfb\x99\xb1\x89\x7a\x54\xda\x22\xb0\xa0\x83\x41\x16\x63\x45\xd4\x3c\xcf\x41\x4b\x83\xcd\x6b\xca\xc5\x08\x7f\x81\xa8\x79\x71\x56\xe9\xa1\xe4\x2a\x22\xb4\x7d\x8c\x55\x75\x95\x90\xce\x06\xb4\x21\x89\xf0\x5e\xbf\x83\x34\xc2\xfb\x7d\x4e\x0b\x6d\x71\x06\xe9\x4c\x3d\xf5\xf5\xee\x6b\x39\x39\xa5\x3c\x86\x7a\x97\x63\x33\xd4\xdf\xcb\xe1\x5c\xf8\xc6\xba\x0a\x80\x8f\xbb\xee\x91\x8a\xb7\xe3\xae\xab\x52\xf9\x98\x9a\x00\x88\xb4\x02\x37\x43\x21\x7d\x3e\x85\x31\x85\x65\x6e\x89\x63\xcc\xcd\xdc\x1f\x85\x2d\x84\x46\x1c\xd0\x40\xfe\xad\x7b\x54\xe2\x64\x02\xeb\x0e\x1f\x8b\xe2\xc3\xfc\x0a\xe5\x9a\x42\xe3\x31\x97\x6e\xcc\x73\x25\x5d\x13\x6f\x93\x5f\xc6\x85\x3b\xd9\x9f\x22\xe0\xa7\xa1\x88\x9a\x5f\xa7\x49\x58\xfd\x07\xd3\x5c\xd0\x13\xde\x2b\x15\xab\xc5\xe9\xbc\xa4\x47\xdb\x17\x11\x70\x70\xf3\x47\xb1\x16\x5b\xbe\xfe\x24\x25\x7a\xcf\x60\x9c\x51\xed\x59\x2b\xcf\x43\xed\xea\x0e\xae\x42\xcd\x18\x26\xc3\xba\xcd\x1a\x6f\xc5\x7f\x91\x5e\xc5\xe0\xcf\x38\x44\xb3\xb0\x03\xc2\xd3\xdb\x17\x78\x0a\x62\x80\x1f\xfb\xcd\xbe\x6d\x6c\x6d\x95\xbb\x30\x07\x31\xb4\x44\x49\x64\x45\xb8\x84\x0f\x50\xb7\x67\xde\x1e\xf3\xc6\xd6\x0f\xb4\xbc\xe2\x0b\x3f\xd1\xc1\x38\xf9\x1b\x98\x1f\xc5\x8c\x6f\x5a\x3a\xeb\x19\x34\x97\xa5\xaf\x5b\xa4\x9b\x26\xb4\xe1\xb6\xce\xdb\x5e\xbf\x77\x97\x4f\xa9\xfc\xff\x0b\x00\x00\xff\xff\xf2\xe3\x47\x5b\x95\x03\x00\x00")

func templatesBodyContentArticleArticleTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesBodyContentArticleArticleTmpl,
		"templates/body/content/article/article.tmpl",
	)
}

func templatesBodyContentArticleArticleTmpl() (*asset, error) {
	bytes, err := templatesBodyContentArticleArticleTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/body/content/article/article.tmpl", size: 917, mode: os.FileMode(420), modTime: time.Unix(1481713853, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesBodyContentArticleDisqusTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x53\x4f\x6f\x9c\x3e\x14\xbc\xf3\x29\x46\x5c\x00\x45\xc1\x3f\xe5\x98\x05\x7e\x6a\x37\x3d\xb4\x87\xa6\x52\x72\xab\xaa\xc8\xe0\x07\x38\x31\x36\x6b\x7b\x97\x12\xb2\xdf\xbd\x62\x61\xa3\xfe\x8b\x7a\x02\x86\xf1\xcc\xbc\xd1\xf3\x34\x09\xaa\xa5\x26\x84\x95\xe9\x3a\xd2\xde\x85\xc7\x63\x30\x4d\xb2\x46\xba\x35\xba\x96\x4d\x7a\x23\xdd\x6e\xef\xee\xa4\x27\xcd\x3b\x3a\x1e\x83\xac\xbd\x2a\xb6\x2b\x3b\x63\xed\x55\x11\x64\x42\x1e\x20\x45\x1e\x8a\x13\xf7\xc1\xb7\x96\xb8\x08\x8b\x8c\x09\x79\x28\x82\xcc\x55\x56\xf6\x1e\x7e\xec\x29\x0f\x3d\x7d\xf7\xec\x91\x1f\xf8\x82\x86\x45\x00\x1c\xb8\xc5\x7a\xd6\xb5\xc6\xfa\xd9\x09\x39\xa2\x69\x7a\x2b\x45\xb4\x09\x00\xc6\x70\x7f\x7b\x73\x8b\x98\x37\x46\x3f\x73\x45\xcf\xd6\x24\xd7\xd8\x9a\xae\xe7\x5e\x96\x52\x49\x3f\x62\x90\xbe\x45\x37\xc2\x28\x81\x52\x99\x06\xdc\x7a\x59\x29\x72\x8b\xc0\x47\x08\xa3\x23\x8f\x27\x6d\x06\xc8\x1a\xd2\x63\x90\x4a\x61\x30\xf6\x09\xb5\xb1\x30\xbe\x25\x8b\xbd\x23\xeb\x7e\x4d\x2a\x05\x69\x2f\x6b\x49\x76\x8d\xfa\x6e\x11\x4e\xef\xd4\xbe\x39\x25\x0c\x80\xb8\xde\xeb\xca\x4b\xa3\xe3\x04\x53\x00\xac\x0a\x6e\x87\x1c\xc2\x54\xfb\xb9\xc5\xb4\xb2\xc4\x3d\x7d\x50\x34\x7f\xc5\xd1\x52\x4c\x94\x6c\x66\x5e\x3a\xb7\x36\x1b\xfc\xd6\x5b\xb4\xfc\xe5\x6e\xd4\x15\x72\x78\xbb\xa7\xcd\x49\x7f\x46\x9d\x9d\xb1\x88\xb1\x08\x17\x7f\x16\x7b\x81\x28\x5d\xc0\xb4\x32\x1d\xa3\xae\x24\x91\x3e\xba\x68\x39\x1f\xbf\xc6\x6a\xc8\xaf\x99\xdc\xfb\xf1\x9e\x37\x9f\x79\x47\x71\xd4\x12\x17\x51\xf2\xf5\xbf\x6f\x78\x79\xc1\x3f\xb8\xa5\x11\xe3\x89\x9b\xa4\xbc\xef\x49\x8b\x6d\x2b\x95\x88\x85\xdb\x25\xb3\xd9\x31\x89\x93\x4d\x90\xb1\x65\xa2\x22\xc8\xb4\x59\x5f\xbf\x28\xe2\x8e\x40\x9a\x97\x8a\xf0\x89\x1f\xf8\xdd\xba\x43\x06\x07\x49\x03\x7c\x4b\xc8\x38\x5a\x4b\x75\x1e\xb6\xde\xf7\xd7\x8c\xfd\x34\xd3\xff\x96\xea\x87\xb3\x5a\x58\x9c\x97\x1b\xbd\x19\xc8\x92\x40\x39\x62\xd9\xa8\x34\x63\xbc\xc8\xd8\xab\x71\xf0\xb6\x68\x88\x4a\x71\xe7\xf2\x50\xb8\xdd\x65\x69\x95\xd4\x4f\x7f\x57\xce\x5c\xcf\xf5\x99\xac\x4c\x63\x2e\x17\x91\xb0\x58\x3c\x33\x36\x13\x8a\xd9\x39\x98\x26\xd2\xe2\x74\xe5\x96\xe7\x8f\x00\x00\x00\xff\xff\x2e\x72\x91\x27\x91\x03\x00\x00")

func templatesBodyContentArticleDisqusTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesBodyContentArticleDisqusTmpl,
		"templates/body/content/article/disqus.tmpl",
	)
}

func templatesBodyContentArticleDisqusTmpl() (*asset, error) {
	bytes, err := templatesBodyContentArticleDisqusTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/body/content/article/disqus.tmpl", size: 913, mode: os.FileMode(420), modTime: time.Unix(1481713853, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesBodyContentArticleShare_iconsTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\xd1\xc1\x4a\xc4\x30\x10\xc6\xf1\x7b\x9f\x22\xec\xa5\x07\x61\x7d\x81\xee\x5e\x44\x45\xf0\x20\xda\x7b\x49\x9b\x69\x3b\xec\x38\x29\x99\x59\xaa\x84\xbe\xbb\x34\x8a\x1e\x4c\x4e\x39\xfc\xf9\x7d\x10\x26\x46\x07\x23\x32\x98\x83\xcc\x36\x40\x87\x83\x67\x39\x6c\x5b\x15\x23\x8e\xe6\x78\xe7\x79\xc4\xe9\xf8\xb6\xb7\x76\x46\x79\xb9\xf6\x84\x32\x43\xd8\xb6\xaa\xe9\xc3\xb9\x6a\x64\xb1\x6c\x06\xb2\x22\xa7\x5a\xb4\x4b\x2b\x3a\xa3\x74\x64\xc3\x04\xb5\x71\x28\x0b\xd9\xcf\x16\x3e\xf4\x54\xff\xee\xd4\xe7\xe6\x76\x97\xff\x07\x46\x3b\x40\xef\xfd\x25\xeb\x1f\x7e\x62\x99\xeb\x8a\xaa\x10\xb2\xba\x5d\x01\xb4\x4c\x09\xf9\x02\x0e\x39\x6b\x9f\x53\x7c\xe2\x32\x9f\xbc\x9f\x08\x16\xba\xe6\xbf\xfe\x98\xb2\xb9\x29\x0f\x04\x70\x0e\x35\x8b\x5f\x53\x2a\x53\x78\xb7\x48\x59\x79\xbf\x97\x3f\x18\x23\xb0\x4b\xd7\xfd\x7e\xbf\x02\x00\x00\xff\xff\x44\xcc\xeb\xfc\xff\x01\x00\x00")

func templatesBodyContentArticleShare_iconsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesBodyContentArticleShare_iconsTmpl,
		"templates/body/content/article/share_icons.tmpl",
	)
}

func templatesBodyContentArticleShare_iconsTmpl() (*asset, error) {
	bytes, err := templatesBodyContentArticleShare_iconsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/body/content/article/share_icons.tmpl", size: 511, mode: os.FileMode(420), modTime: time.Unix(1481713853, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesBodyContentCategoryTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x90\xcf\x6a\xc4\x20\x10\xc6\xef\x79\x8a\x41\xf6\xd8\xc4\xa6\xa7\x52\x8c\x50\xfa\x08\xed\xbd\x48\x1c\x8d\x30\x55\x30\xee\x42\xb1\xf3\xee\x45\x77\xd3\x3f\x27\xbf\x99\xf9\x0d\x9f\xdf\xd4\x6a\xd1\x85\x88\x20\x4a\x28\x84\x82\x79\xa8\x75\x7a\x31\x05\x7d\xca\x9f\xcc\xf0\x05\xad\x4e\xd1\x05\x3f\xbd\x35\xa4\x13\x18\x2d\xf3\x30\xfc\x6e\xaf\x29\x16\x8c\xa5\xed\x2b\x1b\x2e\xb0\x92\xd9\xf7\xa5\xb7\x4d\x88\x98\x61\x4d\x34\x7e\xd8\x71\xbe\x3f\x54\x72\x6e\xc7\x32\xce\xbd\x26\x3f\x3e\x1e\xe2\x36\x78\x10\x7a\x00\x50\xdb\xac\xff\x7d\x48\xc9\x6d\xee\x83\x33\xb5\x07\xa0\xd6\x6c\xa2\x47\x38\xbd\xdf\xc1\xc9\xe4\x12\x56\x42\x78\x5a\x60\x7a\xbe\xea\x9d\xb9\x73\x8a\x82\x56\x06\xb6\x8c\x6e\x11\xb5\x1e\xe8\xf4\x4a\x67\xcf\x2c\xf4\x9f\xd6\x2d\xa7\x92\x46\x2b\x49\xe1\xf0\xb9\x86\x06\x50\xb2\x79\x2b\x69\xc3\x45\xff\xdc\xe2\x3b\x00\x00\xff\xff\x5e\xcf\x66\xec\x49\x01\x00\x00")

func templatesBodyContentCategoryTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesBodyContentCategoryTmpl,
		"templates/body/content/category.tmpl",
	)
}

func templatesBodyContentCategoryTmpl() (*asset, error) {
	bytes, err := templatesBodyContentCategoryTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/body/content/category.tmpl", size: 329, mode: os.FileMode(420), modTime: time.Unix(1481713853, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesBodyContentIndexTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x56\x41\x6f\xdb\x3c\x0c\xbd\xe7\x57\xa8\xfe\x82\xef\x50\x2c\x71\xb3\xd3\xb0\xb9\x06\x8a\xf6\xb0\xc3\xd0\x15\x68\xef\x05\x63\xd3\xb2\x30\x59\x4e\x25\x3a\x68\x67\xf8\xbf\x0f\x92\xe5\x44\x4a\x5d\xac\xc5\x2e\x81\x25\x92\x4f\x8f\x7c\x4f\x42\xfa\xbe\xc4\x4a\x28\x64\x09\x09\x92\x98\x0c\xc3\xa2\xef\xd7\xd7\xad\xaa\x04\x5f\x3f\xd8\x2d\xb7\x83\xaa\x1c\x86\xc5\xe2\x98\x5d\xb4\x8a\x50\x91\xcd\xcf\x4a\xb1\x67\x85\x04\x63\x2e\xdd\x36\x08\x85\x9a\x15\xad\x5c\x35\xe5\x6a\x73\x31\x7d\xb5\x55\x65\x90\x56\x1b\xb7\x96\x7c\xf5\x65\xfa\xf0\x81\xcf\x49\xbe\x60\xac\xef\x45\xc5\xd6\x57\x9a\x44\x21\xd1\x0c\xc3\x82\x31\xbb\xa9\x41\x71\x64\xcb\xc7\x4f\x6c\x09\x63\x8c\x7d\xbd\x7c\x95\x97\xf9\x58\xee\x56\x8c\x65\xf5\x26\xcf\x80\xd5\x1a\xab\xcb\xa4\xef\xa7\xd2\xf5\xbd\xec\xf8\x30\x24\x79\xb0\xe5\x5b\xcd\x52\xc8\xb3\xb4\xde\xe4\x8b\x09\x62\x37\x81\x79\x6e\xad\x66\xcb\x69\x3e\x57\x1d\xd5\x76\x3d\x81\x8c\x6b\x4f\xc6\x55\x9b\x1d\xa8\x69\x36\x12\xb6\x28\x99\xfb\x5d\x95\x58\x41\x27\x29\xc9\xb7\x2f\x23\xec\x2b\x8c\x80\xdb\x71\x0b\xa5\x41\x17\x8a\x19\xb8\x90\x55\x28\x4b\xed\x81\x21\x63\x2f\x5c\xd4\xc2\x01\xf8\x06\x08\x3f\xc4\xd6\x9e\xfc\xbd\x6b\x40\x89\xdf\x68\x8b\x49\x34\x78\x0a\xf7\x41\x0e\xd7\x40\xc8\x5b\xfd\x12\xf2\x80\x39\x12\xa6\x2b\x0a\x34\x26\xf1\x72\xa6\x85\x2f\x4c\x83\x49\x1d\xc1\xd6\x35\x35\x32\x52\xf8\x18\xb3\x22\xbf\x97\xde\x03\x70\x13\x50\x8b\x9c\x48\xc0\xad\x0b\xdf\xca\x9d\x6f\x43\xa8\xaa\x3d\xf4\x40\xc0\x2d\x7d\x02\x1e\x32\x76\xcb\x59\x92\xf3\xeb\x2c\xdd\x1d\xfc\x1a\x36\x3c\x5e\xd1\x63\x6f\xd9\x6e\x22\x44\xf8\x4c\x2b\x2d\x78\x4d\x49\x3e\xc3\x77\x4b\x8a\x6d\x49\x1d\x74\x3f\xa4\x4c\xd3\x99\xec\x77\x23\xcc\x53\x67\xee\x05\xa1\x82\x26\xb4\x12\x7b\xfb\xd2\xdd\xa1\x6e\x40\x0a\xf5\x2b\x42\x1d\x9d\xfd\xf7\xfa\xff\x4a\x77\xe4\x23\xd5\x1a\xa1\x4c\xf2\x1f\x08\x7b\x64\xc0\x8a\xb6\x69\x50\xd1\x59\x0c\x1a\x0d\x2d\x98\xa8\x9b\x98\xdf\x0b\x9f\x8c\xac\xd6\xf9\xe2\xc4\x15\x11\x37\xfb\xa2\xdc\xb6\x54\x0b\xc5\x19\xb5\xcc\x20\xb2\x1a\x35\x9e\x8d\x6f\x46\x00\x11\x01\x88\x8a\x71\x62\xeb\xdb\xae\xd9\xa2\xfe\x59\xdd\x01\x47\xc3\x2e\x1c\x64\xf8\x78\x3a\x55\x0a\x54\x84\xda\xcb\x92\x75\x72\x0a\xee\x80\x0b\x05\x24\x5a\x75\x90\x2c\x93\x62\x8a\xc6\xee\xc5\x27\x2b\x51\xa7\x35\x2a\xb2\x87\xb1\x4d\x34\xda\x52\x18\xd8\x4a\x2c\x4f\xed\x14\x7b\xe1\x20\xc0\xfa\x4e\xe3\x5e\xb4\x9d\xb1\x0a\xc4\xc0\xb6\xe6\x7f\x09\x4f\x5d\xfb\x2d\x9a\xae\x14\x81\x21\x83\x1b\xb3\xb3\x64\xc6\x87\x5b\xc3\x8b\x9f\xc4\xd1\xc7\x52\x1c\xf9\xbb\xd4\x93\xc3\x7c\xb3\x50\x90\xd8\x63\xe2\x59\xcf\x90\x4e\x85\x2a\xf1\xd9\x41\x29\xf4\x50\x1b\xf7\x6e\xee\x1c\x8e\xaf\xf4\x37\x2e\xb2\x8c\xcf\x98\x37\x8d\x6d\x2b\x9a\x18\xeb\xfb\xf4\x9c\x8d\x0d\x9e\xa7\xc1\x4d\x7b\xb7\x32\xcb\xd8\x15\xff\xa4\xd3\x2d\x3e\xd3\x1b\x1a\xe9\x79\x8d\xc6\xaf\x4e\xda\xaf\x2c\x2d\xc5\x3e\xb0\xee\xd8\x9b\xa8\xc6\xc6\x7c\x34\x8a\xf9\xff\x00\x63\xc2\x9f\x00\x00\x00\xff\xff\xd4\x5b\x1b\x6a\x49\x08\x00\x00")

func templatesBodyContentIndexTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesBodyContentIndexTmpl,
		"templates/body/content/index.tmpl",
	)
}

func templatesBodyContentIndexTmpl() (*asset, error) {
	bytes, err := templatesBodyContentIndexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/body/content/index.tmpl", size: 2121, mode: os.FileMode(420), modTime: time.Unix(1481713853, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesBodyContentPageTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8e\xb1\xce\xc2\x30\x0c\x84\xf7\x3c\x85\xd5\x3d\xed\x9f\x7f\x62\x28\x5d\xfa\x02\x0c\xbc\x40\xd5\x38\xad\xa5\xe0\x48\x34\xea\x62\xfc\xee\x28\x85\x80\xc4\x76\xfe\x4e\xbe\x3b\x11\x8f\x81\x18\xa1\xc9\x94\x23\x36\xaa\x46\xa4\xbd\x4c\x0b\xb6\xd7\x02\x54\xe1\x01\x22\xed\x98\x38\xd0\x52\x99\x11\x41\xf6\xaa\xc6\x7c\xff\xe7\xc4\x19\x39\x97\x84\xde\xd3\x0e\x73\x9c\xb6\xed\x7c\xe0\x89\x18\xef\x30\xa7\x68\x6f\xde\xba\xbf\xaa\x52\x08\x1b\x66\xeb\x8e\x3b\x2e\xf6\x54\xc5\xdb\xf8\x6f\x06\x03\xd0\xaf\x6e\xf8\x99\xd4\x77\xab\x2b\x56\xc5\xe3\xab\xba\x34\x77\x9e\xf6\xe1\x33\xef\x19\x00\x00\xff\xff\x21\x09\x94\x3e\xde\x00\x00\x00")

func templatesBodyContentPageTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesBodyContentPageTmpl,
		"templates/body/content/page.tmpl",
	)
}

func templatesBodyContentPageTmpl() (*asset, error) {
	bytes, err := templatesBodyContentPageTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/body/content/page.tmpl", size: 222, mode: os.FileMode(420), modTime: time.Unix(1481713853, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesBodyContentTagTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x50\x4d\x6b\xc4\x20\x10\xbd\xe7\x57\x0c\x61\x8f\x8d\x36\x3d\x95\x62\x84\xd2\x9f\xd0\xbd\x17\x89\xa3\x11\xa6\x06\x12\x77\x2f\xd3\xf9\xef\x25\xee\xda\xee\xc9\xe7\xfb\xe0\xf9\x64\xf6\x18\x52\x46\xe8\x4b\x2a\x84\xbd\x48\xc7\xac\xce\x2e\x8a\xc0\x0f\x30\xab\x8f\x35\x87\x14\xd5\xf9\x50\xab\x88\xd9\x8b\x74\xdd\x7f\x70\x5e\x73\xc1\x5c\x8e\xa8\xf1\xe9\x0a\x33\xb9\x7d\x9f\x2a\xed\x52\xc6\x0d\xe6\x95\x86\x6f\x3f\x8c\xcf\x0d\xad\x21\xec\x58\x86\xb1\xde\x29\x0e\xaf\x0d\xdc\x85\x97\xde\x76\x00\x66\x19\x6d\x7b\x8b\xd1\xcb\x58\xb9\x0b\x1d\x07\x00\xf3\xe6\x72\x44\x38\x7d\x3d\xc1\xc9\x6d\x25\xcd\x84\xf0\x36\x81\x7a\xbf\xe1\x5d\xa4\xfa\x0c\x25\x6b\x1c\x2c\x1b\x86\xa9\x67\x6e\x56\xf5\x49\x97\x28\xd2\xdb\x07\xea\x3e\xd1\x68\x67\x8d\xa6\xd4\x7a\x6e\x7b\x01\x8c\x3e\xba\x8d\xf6\xe9\x6a\xff\xbe\xe1\x37\x00\x00\xff\xff\xb2\x22\x85\x22\x3f\x01\x00\x00")

func templatesBodyContentTagTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesBodyContentTagTmpl,
		"templates/body/content/tag.tmpl",
	)
}

func templatesBodyContentTagTmpl() (*asset, error) {
	bytes, err := templatesBodyContentTagTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/body/content/tag.tmpl", size: 319, mode: os.FileMode(420), modTime: time.Unix(1481713853, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesBodyFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x4f\x4d\x6b\x03\x21\x10\xbd\xef\xaf\x18\xbc\x5b\x9b\x9e\x4a\x31\xd2\xbf\x62\x74\x5c\x05\xe3\x88\x4e\x93\x26\xcb\xfe\xf7\x62\x92\x2d\xa1\xd0\x8b\xf3\x1e\x4f\xde\xc7\xb2\x78\x0c\xa9\x20\x88\x40\xc4\xd8\xc4\xba\x4e\xda\xa7\x13\xb8\x6c\x7b\xdf\x0b\x47\x85\x6d\x2a\xd8\xc0\x51\x96\x47\x2f\x77\xaf\x1b\xa2\x10\x3a\xb2\xdc\xdd\x78\x9e\xe5\xfb\x06\x1e\xc2\x9b\x30\x13\xc0\xb3\x19\xe3\x37\x4b\x87\x65\xe4\x0c\x0d\x40\xd7\xfb\x05\xd0\x16\x62\xc3\xb0\x17\x91\xb9\x7e\x28\x35\x27\x8e\x5f\x87\x17\x47\x47\x65\x67\x2a\x57\x9b\xf1\xda\x48\x55\xca\x24\xcc\x78\xb5\xb2\x06\x52\x87\xa3\xf5\x08\xe7\xc4\x71\x33\xea\xd5\x96\x2d\x71\xce\x97\x1a\x93\xa3\x02\xbf\x48\x46\xb4\x8d\x85\xd1\x6a\x7c\x34\x70\xb8\xfc\xd3\x80\xcf\x89\x19\xdb\xdf\x0a\xc2\x7c\x3e\xb1\xd1\xe2\xbe\x44\xdd\xa6\x68\xe5\xd3\xc9\x4c\x8f\xb3\x2c\x58\xfc\xba\x4e\x3f\x01\x00\x00\xff\xff\x9c\x43\xc2\x70\x66\x01\x00\x00")

func templatesBodyFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesBodyFooterTmpl,
		"templates/body/footer.tmpl",
	)
}

func templatesBodyFooterTmpl() (*asset, error) {
	bytes, err := templatesBodyFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/body/footer.tmpl", size: 358, mode: os.FileMode(420), modTime: time.Unix(1481713853, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesBodyFooter_scriptsTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\xcc\x41\x0e\x82\x30\x10\x85\xe1\x3d\xa7\x20\x3d\xc0\x8c\x6c\x0d\x72\x15\x53\x60\xc0\x69\x80\xa9\x9d\x31\xd1\x34\xbd\xbb\x09\x98\x18\xe3\xee\xbd\x7f\xf1\xe5\x3c\xd2\xc4\x1b\xd5\x6e\x12\x31\x4a\x57\x1d\x12\x47\x53\x57\x4a\xd5\x1e\xbb\xd6\x34\x5c\xdc\xcd\x2c\xea\x19\xd1\x07\xff\x84\x59\x64\x5e\xc8\x47\x56\x18\x64\xdd\x1b\x2e\xdc\x2b\x86\xfb\x83\xd2\x0b\x1b\x68\x1a\x38\x7d\x1e\xac\xbc\x41\x50\xd7\xb5\x78\x80\xdd\xaf\x8c\x38\x93\xf5\x22\xa6\x96\x7c\xdc\xc1\x91\xd5\x30\x28\x7e\xeb\xbf\x91\x33\x6d\x63\x29\xd5\x3b\x00\x00\xff\xff\xe1\xf1\x56\x06\xc2\x00\x00\x00")

func templatesBodyFooter_scriptsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesBodyFooter_scriptsTmpl,
		"templates/body/footer_scripts.tmpl",
	)
}

func templatesBodyFooter_scriptsTmpl() (*asset, error) {
	bytes, err := templatesBodyFooter_scriptsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/body/footer_scripts.tmpl", size: 194, mode: os.FileMode(420), modTime: time.Unix(1481713853, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesBodyNavbarTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x55\x4d\x6b\xdc\x30\x10\xbd\xe7\x57\x0c\xea\x1e\x1a\xe8\xda\xf7\xe0\x35\xa4\x81\xd2\x63\x21\x7b\x2f\xb3\xd6\xac\x2c\x50\x24\x23\xcb\x1b\x16\xe3\xff\x5e\x24\x5b\xb6\xec\x6c\x4a\x0e\x0d\xf4\xb4\xd6\xcc\x9b\xaf\xf7\x46\xda\xbe\xe7\x74\x96\x9a\x80\x69\xbc\x9c\xd0\xb2\x61\xb8\x2b\xb8\xbc\x40\xa5\xb0\x6d\x0f\x93\x15\xc6\x9f\x3d\xa7\x33\x76\xca\xc5\x63\xeb\xd0\xc9\x6a\xef\x4c\xc3\xc0\x1a\x45\x01\x2e\x05\x3a\x69\x34\x2b\xef\x00\xd2\x4c\x95\xd1\x0e\xa5\x26\x1b\x3c\x6b\xdf\x94\xaf\x26\xe4\xb3\x1f\xa0\x38\x75\xce\x19\x0d\xee\xda\xd0\x81\x8d\x07\xb6\x09\x71\x46\x08\x45\x0c\x38\x3a\x9c\x0e\xbe\x94\x52\xd8\xb4\xb3\x19\xad\x20\x77\x60\xd9\x14\x33\xbb\x63\x21\x80\xa2\x6d\x50\xc7\xd4\xad\xdd\x1b\xad\xae\xac\x3c\x86\x7c\xb0\x0c\x55\xe4\x1e\xf7\x4e\x98\xac\x8c\xde\x7b\x0a\xcb\xcf\x84\x15\xf9\x48\xc4\x7c\xc6\x0d\x23\x27\x8b\x9a\x33\xa8\x2d\x9d\x0f\x2c\x67\x65\xdf\x67\x4f\x46\x9f\xa5\xc8\x8e\xd2\x29\x1a\x86\x22\xc7\x49\x81\x9c\xcb\xcb\xf8\xd9\xf7\xf2\x0c\xd9\x73\x6d\x5e\x7f\x06\x0d\x86\xe1\x3d\x8d\x22\x79\xf0\x86\xc5\x90\xc3\x58\xc8\x7e\xa1\xa0\x16\xbe\xa2\xe6\x90\x3d\x5a\x27\x2b\x45\x2d\xc4\x26\x7c\x8d\x47\x5b\xd5\xf2\x42\xf7\x53\x15\x80\xa2\x53\x49\x99\xb8\x5e\x1a\x2f\x89\x44\x63\x8b\x6f\xb3\xcc\x49\x00\x0a\x25\xcb\x02\xe3\xe8\x38\xfa\xb3\xda\xbd\x28\x56\x4e\xe8\xd6\x4f\x5f\xe4\x4a\xa6\x89\x49\xf3\x61\xb8\x4b\x0c\x16\xb5\x20\xd8\xfd\xfe\x06\xbb\x06\x05\xc1\xc3\x61\x9a\xea\xdd\x62\x1e\xd6\xe6\x7d\x1f\xf0\xd9\xb3\xea\xc4\x30\x78\xee\xc7\x73\xc2\xfc\xed\xda\x51\xdb\x4e\x2d\x6c\x02\x69\x0e\x4b\x5f\x91\xde\x91\xd7\x27\x74\x24\x8c\x95\x1b\x66\x17\xf3\xfd\x04\x3c\xa2\x58\x43\xbc\xe1\x03\xcc\xc7\x4f\x2b\x45\xed\xb6\x32\x7c\xac\x85\x35\x59\xb1\x0c\xb7\xa6\xe1\xe6\x55\xa7\xb7\x2f\xd2\xf8\x65\x73\x91\x17\x6c\x52\xac\x38\xcd\x4f\x0a\x5a\x72\xfe\x82\x9c\xca\x79\xa9\x37\x43\xc5\x0c\xfb\x17\xd2\x5d\x52\x72\xa3\x72\x35\xa6\xbf\x06\xa5\x6f\x4e\xe0\x03\x76\x18\xb7\xf9\xe1\x00\xbb\xec\x87\x54\x8e\xec\xf7\xeb\x53\x0c\x9e\xd3\xac\xe2\x8a\x54\xf0\x64\xd8\x3c\xa2\xfd\xda\x2c\x91\xd3\xbe\xae\x6c\xeb\xa7\xe1\x84\x5c\x10\x34\x9d\x52\x51\x9d\xbe\x57\xa4\x61\x6e\xcf\x6f\x5a\x78\x33\x56\xac\xf8\xfd\x5a\xb7\xb2\xde\xbe\xf5\xfe\x6d\xd1\x37\x6e\x49\x5c\x84\x9b\x2b\xf6\x2f\xc5\x0f\x05\x3e\x43\x76\x87\x22\x28\xbe\x69\xf8\x2f\x5a\x1f\x51\x84\xb0\x8f\x29\xec\x50\x78\x71\x03\x7e\xd1\x35\x1c\xff\x23\x49\xdf\x22\x53\xcf\xea\x5f\x22\x9a\x27\xe3\xf4\x13\xed\x7f\x02\x00\x00\xff\xff\x72\xd5\x84\x3f\x4d\x08\x00\x00")

func templatesBodyNavbarTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesBodyNavbarTmpl,
		"templates/body/navbar.tmpl",
	)
}

func templatesBodyNavbarTmpl() (*asset, error) {
	bytes, err := templatesBodyNavbarTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/body/navbar.tmpl", size: 2125, mode: os.FileMode(420), modTime: time.Unix(1481713853, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHeadHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\xcd\x31\xae\x02\x21\x10\x87\xf1\x7e\x4f\x41\xa6\x7f\xc3\x4b\xb6\x75\xbd\x0b\xc2\x7f\x03\x11\x06\xc3\x4c\x63\x08\x77\xb7\x53\x2f\x60\xfb\x2b\xbe\x6f\xce\x84\xb3\x08\x1c\x65\x84\x84\x41\x6b\x6d\x97\x5a\xe4\xee\x06\xea\x41\x6a\xcf\x0a\xcd\x80\x91\xcb\x03\xe7\x41\xde\x0b\x2c\x49\xe0\x5b\xef\xa6\x36\xc2\x23\x26\xe1\xd8\x9b\x7f\x83\xdf\xf9\x9f\x77\x1f\x55\x3f\xc6\xad\x08\x47\x55\xba\xfe\x24\xff\x67\x19\x0d\x5f\x93\x39\x21\x69\xad\xed\x15\x00\x00\xff\xff\xe8\x1b\x48\x83\xe0\x00\x00\x00")

func templatesHeadHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesHeadHeaderTmpl,
		"templates/head/header.tmpl",
	)
}

func templatesHeadHeaderTmpl() (*asset, error) {
	bytes, err := templatesHeadHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/head/header.tmpl", size: 224, mode: os.FileMode(420), modTime: time.Unix(1481713853, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHeadHeader_scriptsTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\xca\x48\x4d\x4c\x49\x2d\x8a\x2f\x4e\x2e\xca\x2c\x28\x29\x56\xaa\xad\xe5\xaa\xae\xd6\xd7\x52\xf0\x2a\x2d\x2e\x51\x48\x54\x28\xc8\x49\x4c\x4e\xcd\xc8\xcf\x49\x49\x2d\x52\xd0\xd2\x07\x4b\xa6\xe6\xa5\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\x9f\x23\x5e\xcf\x41\x00\x00\x00")

func templatesHeadHeader_scriptsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesHeadHeader_scriptsTmpl,
		"templates/head/header_scripts.tmpl",
	)
}

func templatesHeadHeader_scriptsTmpl() (*asset, error) {
	bytes, err := templatesHeadHeader_scriptsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/head/header_scripts.tmpl", size: 65, mode: os.FileMode(420), modTime: time.Unix(1481713853, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHeadShare_thisTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x90\x4d\x4b\x03\x31\x10\x86\xef\xfd\x15\x43\x4e\x0a\x92\x9c\xbc\xf4\x63\x41\x7b\xf1\x20\x22\xd8\xbb\xa4\x9b\xd9\x66\x4a\x4d\x42\x66\xb6\x1f\x84\xfc\x77\xd9\xee\xda\xa3\x7a\x7a\xe1\x79\x93\xf0\xbc\x29\xc5\x61\x47\x01\x41\xb1\xb7\x19\x3f\xc5\x13\xab\x5a\x67\xa5\x50\x07\x7a\x1d\x43\x47\x3b\xfd\x31\x54\x1b\x4f\xfc\xde\x6f\x0f\xc4\x1e\x73\xad\x33\x80\x25\xb7\x99\x92\x80\x5c\x12\xae\x94\xe0\x59\xcc\xde\x1e\xed\x48\x55\x73\xb4\x19\xf8\x44\xd2\xfa\x4d\x7c\x3c\xaf\x24\xf7\xb8\x58\x9a\xb1\x6d\xfe\xbc\x0e\x9c\xdb\x95\x32\xe6\xa4\xaf\x62\x83\x97\x6e\xe3\x97\xd9\xf6\x22\x31\x4c\xc1\x7a\xcf\xaa\xf9\xff\xa3\xc3\x09\x00\x96\x57\xda\x79\xd1\x31\x09\xc5\xc0\x77\x25\xfd\xcc\x9a\x83\x2a\xe5\xb7\xd5\xea\x01\x5c\x7c\x8b\xf2\x62\xd9\xcf\xa1\xb3\x07\xc6\x89\xac\x63\xba\xdc\x88\xb7\xec\x9f\x9c\xcb\xc8\xfc\x6c\xf3\x84\xeb\xfd\x62\x10\xbc\xc9\x96\x82\xc1\x5d\xbf\x7a\xcc\xef\x00\x00\x00\xff\xff\xc1\x4a\xda\x05\x8b\x01\x00\x00")

func templatesHeadShare_thisTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesHeadShare_thisTmpl,
		"templates/head/share_this.tmpl",
	)
}

func templatesHeadShare_thisTmpl() (*asset, error) {
	bytes, err := templatesHeadShare_thisTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/head/share_this.tmpl", size: 395, mode: os.FileMode(420), modTime: time.Unix(1481713853, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/atom.tmpl": templatesAtomTmpl,
	"templates/base.tmpl": templatesBaseTmpl,
	"templates/body/analytics.tmpl": templatesBodyAnalyticsTmpl,
	"templates/body/content/archive.tmpl": templatesBodyContentArchiveTmpl,
	"templates/body/content/article/article.tmpl": templatesBodyContentArticleArticleTmpl,
	"templates/body/content/article/disqus.tmpl": templatesBodyContentArticleDisqusTmpl,
	"templates/body/content/article/share_icons.tmpl": templatesBodyContentArticleShare_iconsTmpl,
	"templates/body/content/category.tmpl": templatesBodyContentCategoryTmpl,
	"templates/body/content/index.tmpl": templatesBodyContentIndexTmpl,
	"templates/body/content/page.tmpl": templatesBodyContentPageTmpl,
	"templates/body/content/tag.tmpl": templatesBodyContentTagTmpl,
	"templates/body/footer.tmpl": templatesBodyFooterTmpl,
	"templates/body/footer_scripts.tmpl": templatesBodyFooter_scriptsTmpl,
	"templates/body/navbar.tmpl": templatesBodyNavbarTmpl,
	"templates/head/header.tmpl": templatesHeadHeaderTmpl,
	"templates/head/header_scripts.tmpl": templatesHeadHeader_scriptsTmpl,
	"templates/head/share_this.tmpl": templatesHeadShare_thisTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"atom.tmpl": &bintree{templatesAtomTmpl, map[string]*bintree{}},
		"base.tmpl": &bintree{templatesBaseTmpl, map[string]*bintree{}},
		"body": &bintree{nil, map[string]*bintree{
			"analytics.tmpl": &bintree{templatesBodyAnalyticsTmpl, map[string]*bintree{}},
			"content": &bintree{nil, map[string]*bintree{
				"archive.tmpl": &bintree{templatesBodyContentArchiveTmpl, map[string]*bintree{}},
				"article": &bintree{nil, map[string]*bintree{
					"article.tmpl": &bintree{templatesBodyContentArticleArticleTmpl, map[string]*bintree{}},
					"disqus.tmpl": &bintree{templatesBodyContentArticleDisqusTmpl, map[string]*bintree{}},
					"share_icons.tmpl": &bintree{templatesBodyContentArticleShare_iconsTmpl, map[string]*bintree{}},
				}},
				"category.tmpl": &bintree{templatesBodyContentCategoryTmpl, map[string]*bintree{}},
				"index.tmpl": &bintree{templatesBodyContentIndexTmpl, map[string]*bintree{}},
				"page.tmpl": &bintree{templatesBodyContentPageTmpl, map[string]*bintree{}},
				"tag.tmpl": &bintree{templatesBodyContentTagTmpl, map[string]*bintree{}},
			}},
			"footer.tmpl": &bintree{templatesBodyFooterTmpl, map[string]*bintree{}},
			"footer_scripts.tmpl": &bintree{templatesBodyFooter_scriptsTmpl, map[string]*bintree{}},
			"navbar.tmpl": &bintree{templatesBodyNavbarTmpl, map[string]*bintree{}},
		}},
		"head": &bintree{nil, map[string]*bintree{
			"header.tmpl": &bintree{templatesHeadHeaderTmpl, map[string]*bintree{}},
			"header_scripts.tmpl": &bintree{templatesHeadHeader_scriptsTmpl, map[string]*bintree{}},
			"share_this.tmpl": &bintree{templatesHeadShare_thisTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

